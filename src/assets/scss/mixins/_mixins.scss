//
// Mixins
// --------------------------------------------------

@mixin animation($animate...) {
  $max: length($animate);
  $animations: "";

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation: $animations;
  -o-animation: $animations;
  animation: $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@mixin background-size($horizontal: center, $vertical: center) {
  background-position: $horizontal $vertical;
  -moz-background-size: cover;
  -webkit-background-size: cover;
  background-size: cover;
}

//
// Responsive images (local)
// --------------------------------------------------

@mixin image($file, $device) {
  background-image: url(image_path($device, $file));
  background-repeat: no-repeat;

  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    @include background-size();
    background-image: url(image_path(
      $device,
      str-slice($file, 0, -5) + "@2x" + str-slice($file, -4, -1)
    ));
  }
}
// --------------------------------------------------
$root: '../../../';

@function image_path( $file) {
  @return $root + 'images/' + $file;
}
//
// Responsive images (local)
// --------------------------------------------------

@mixin image_svg($file) {
  background-image: url(image_path($file));
  background-repeat: no-repeat;
  background-size: cover;
}

// responsive media queries
@mixin respond-to($media) {
  @if $media == iphone_5 {
    @media only screen and (max-width: 320px) {
      @content;
    }
  } @else if $media == mobile {
    @media only screen and (max-width: $break-small - 1) {
      @content;
    }
  } @else if $media == tablet {
    @media only screen and (min-width: $break-small) {
      @content;
    }
  } @else if $media == tablet_portrait {
    @media only screen and (min-width: $break-small) and (max-width: $break-medium) {
      @content;
    }
  } @else if $media == not_desktop {
    @media only screen and (max-width: $break-medium - 1) {
      @content;
    }
  } @else if $media == desktop {
    @media only screen and (min-width: $break-medium) {
      @content;
    }
  } @else if $media == not_desktop_big {
    @media only screen and (max-width: $break-large) {
      @content;
    }
  } @else if $media == desktop_big {
    @media only screen and (min-width: $break-large) {
      @content;
    }
  } @else if $media == not_desktop_extra_big {
    @media only screen and (max-width: $break-larger) {
      @content;
    }
  } @else if $media == desktop_1400 {
    @media only screen and (min-width: $break-larger) {
      @content;
    }
  } @else if $media == desktop_extra_big {
    @media only screen and (min-width: $break-larger) {
      @content;
    }
  } @else if $media == desktop_1600 {
    @media only screen and (min-width: $break-larger-big) {
      @content;
    }
  } @else if $media == desktop_1800 {
    @media only screen and (min-width: $break-larger-xbig) {
      @content;
    }
  } @else if $media == hover {
    @media only screen and (min-width: $break-medium) {
      &:hover,
      &.hover {
        @content;
      }
    }

    @media (hover: none) {
      &.hover {
        @content;
      }
    }
  } @else if $media == hoverActive {
    @media only screen and (min-width: $break-medium) {
      &:active,
      &:focus,
      &:hover {
        @content;
      }
    }

    @media (hover: none) {
      .hover {
        @content;
      }
    }
  }
}

@mixin retina() {
  @media (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    @content;
  }
}

@mixin retina_device($device) {
  @if $device == mobile {
    $device-media: "max-width: " + $break-small - 1;
  } @else if $device == tablet {
    $device-media: "min-width: " + $break-small;
  } @else if $device == desktop {
    $device-media: "min-width: " + $break-medium;
  } @else if $device == desktop_big {
    $device-media: "min-width: " + $break-large;
  }

  @media only screen and (-o-min-device-pixel-ratio: 2.6/2),
    only screen and (-webkit-min-device-pixel-ratio: 1.3),
    only screen and (min-device-pixel-ratio: 1.3),
    only screen and (min-resolution: 1.3dppx) {
    @content;
  }
}

@mixin image($file, $device) {
  background-image: url(image_path($device, $file));
  background-repeat: no-repeat;

  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    @include background-size();
    background-image: url(image_path(
      $device,
      str-slice($file, 0, -5) + "@2x" + str-slice($file, -4, -1)
    ));
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
}

@mixin size($width, $height: $width) {
  height: $height;
  width: $width;
}

@mixin transform($vars) {
  -ms-transform: $vars;
  -webkit-transform: $vars;
  transform: $vars;
}

@mixin transition(
  $property: all,
  $duration: $animation,
  $delay: 0s,
  $ease: ease-out
) {
  transition: $property $duration $ease $delay;
}

@mixin transition_str($vars) {
  transition: $vars;
}

@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
  perspective: $perspective;
}

@mixin text-shadow() {
  //scss-lint:disable ColorVariable
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);
  //scss-lint:enable ColorVariable
}

/***[ animation easing ]******************************************************************************************/

$easeInCubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
$easeOutCubic: cubic-bezier(0.215, 0.61, 0.355, 1);
$easeInOutCubic: cubic-bezier(0.645, 0.045, 0.355, 1);
$easeInCirc: cubic-bezier(0.6, 0.04, 0.98, 0.335);
$easeOutCirc: cubic-bezier(0.075, 0.82, 0.165, 1);
$easeInOutCirc: cubic-bezier(0.785, 0.135, 0.15, 0.86);
$easeInExpo: cubic-bezier(0.95, 0.05, 0.795, 0.035);
$easeOutExpo: cubic-bezier(0.19, 1, 0.22, 1);
$easeInOutExpo: cubic-bezier(1, 0, 0, 1);
$easeInQuad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
$easeOutQuad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$easeInOutQuad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
$easeInQuart: cubic-bezier(0.895, 0.03, 0.685, 0.22);
$easeOutQuart: cubic-bezier(0.165, 0.84, 0.44, 1);
$easeInOutQuart: cubic-bezier(0.77, 0, 0.175, 1);
$easeInQuint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
$easeOutQuint: cubic-bezier(0.23, 1, 0.32, 1);
$easeInOutQuint: cubic-bezier(0.86, 0, 0.07, 1);
$easeInSine: cubic-bezier(0.47, 0, 0.745, 0.715);
$easeOutSine: cubic-bezier(0.39, 0.575, 0.565, 1);
$easeInOutSine: cubic-bezier(0.445, 0.05, 0.55, 0.95);
$easeInBack: cubic-bezier(0.6, -0.28, 0.735, 0.045);
$easeOutBack: cubic-bezier(0.175, 0.885, 0.32, 1.275);
$easeInOutBack: cubic-bezier(0.68, -0.55, 0.265, 1.55);

@mixin placeholder($color, $color2: $white) {
  &::-webkit-input-placeholder {
    /* WebKit browsers */
    color: $color;
    transition: color 0.2s;
  }

  &::-moz-placeholder {
    /* Mozilla Firefox 19+ */
    color: $color;
    transition: color 0.2s;
  }

  &:-ms-input-placeholder {
    /* Internet Explorer 10+ */
    color: $color;
    transition: color 0.2s;
  }

  &:focus::-webkit-input-placeholder {
    /* WebKit browsers */
    color: $color2;
  }

  &:focus::-moz-placeholder {
    /* Mozilla Firefox 19+ */
    color: $color2;
  }

  &:focus:-ms-input-placeholder {
    /* Internet Explorer 10+ */
    color: $color2;
  }
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin themify() {
  // Iterate over the themes
  @each $theme-name, $theme in $themes {
    $current-theme: $theme !global;
    @if $theme-name == "default" {
      @content;
    } @else {
      .theme-#{$theme-name} & {
        @content;
      }
    }
  }
}

@mixin themify-body() {
  // Iterate over the themes
  @each $theme-name, $theme in $themes {
    $current-theme: $theme !global;
    @if $theme-name == "default" {
      @content;
    } @else {
      &.theme-#{$theme-name} {
        @content;
      }
    }
  }
}

@mixin default_margins() {
  margin-top: $block-margin-mobile;

  @include respond-to(tablet) {
    margin-top: $block-margin-tablet;
  }

  @include respond-to(desktop) {
    margin-top: $block-margin-desktop;
  }

  @include respond-to(desktop_big) {
    margin-top: $block-margin-desktop-big;
  }
}

@mixin block_image_margins() {
  @include default_margins();

  + [class^="block_soundcloud"],
  + [class^="block_image"],
  + [class^="block_list_slider"],
  + [class^="block_image_slider"],
  + [class^="block_spotify"],
  + [class^="block_single"] {
    @content;

    margin-top: $block-margin-next-mobile;

    @include respond-to(tablet) {
      margin-top: $block-margin-next-tablet;
    }

    @include respond-to(desktop) {
      margin-top: $block-margin-next-desktop;
    }

    @include respond-to(desktop_big) {
      margin-top: $block-margin-next-desktop-big;
    }
  }
}

@mixin block_next_margin($selector) {
  [class^="#{$selector}"] {
    + [class^="#{$selector}"] {
      margin-top: $block-margin-next-mobile;

      @include respond-to(tablet) {
        margin-top: $block-margin-next-tablet;
      }

      @include respond-to(desktop) {
        margin-top: $block-margin-next-desktop;
      }

      @include respond-to(desktop_big) {
        margin-top: $block-margin-next-desktop-big;
      }
    }
  }
}

@mixin stroke($color, $width) {
  -webkit-text-stroke: $width $color;
  -moz-text-stroke: $width $color;
  -ms-text-stroke: $width $color;

  -o-text-stroke: $width $color;
  -webkit-text-fill-color: transparent;
  -moz-text-fill-color: transparent;
  -ms-text-fill-color: transparent;

  -o-text-fill-color: transparent;
  -webkit-font-smoothing: antialiased;
  -moz-font-smoothing: antialiased;
  -ms-font-smoothing: antialiased;

  -o-font-smoothing: antialiased;
}

@mixin privatePage {
  #body[data-section="bookingsPage"] &,
  #body[data-section="reportsPage"] &,
  #body[data-section="bookingsGuidePage"] &,
  #body[data-section="ticketsPage"] &,
  #body[data-section="historicBookingsPage"] & {
    @content;
  }
}
